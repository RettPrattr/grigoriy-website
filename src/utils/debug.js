/**
 * Debug utilities for API and data handling
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ–π –∫–æ–Ω—Å–æ–ª–∏
 */

/**
 * Logs API request details for debugging (disabled)
 */
export function logApiRequest() {
  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞
}

/**
 * Logs API response for debugging (disabled)
 */
export async function logApiResponse() {
  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞
}

/**
 * Logs API error for debugging (disabled)
 */
export function logApiError() {
  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞
}

/**
 * Creates a simplified preview of data for logging (disabled)
 */
function getDataPreview() {
  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞
  return null;
}

/**
 * Test all API endpoints to verify connectivity (disabled)
 */
export async function testApiEndpoints() {
  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
export async function testCORS() {
  const apiUrl = process.env.NEXT_PUBLIC_STRAPI_URL || 'http://localhost:1337';
  const endpoints = [
    { path: 'api/main-page', params: '?populate=*' }
  ];
  
  console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS...');
  
  for (const endpoint of endpoints) {
    const url = `${apiUrl}/${endpoint.path}${endpoint.params || ''}`;
    try {
      // –î–æ–±–∞–≤–ª—è–µ–º origin –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CORS
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Origin': 'http://localhost:3000'
        }
      });
      
      console.log(`CORS –¥–ª—è ${endpoint.path}:`);
      console.log(` - Status: ${response.status} ${response.statusText}`);
      console.log(` - Access-Control-Allow-Origin: ${response.headers.get('Access-Control-Allow-Origin')}`);
      console.log(` - Access-Control-Allow-Credentials: ${response.headers.get('Access-Control-Allow-Credentials')}`);
      
      if (response.ok) {
        console.log(' - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      } else {
        console.log(' - –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
      }
    } catch (error) {
      console.error(`${endpoint.path}: –û—à–∏–±–∫–∞ - ${error.message}`);
    }
  }
  
  console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
} 