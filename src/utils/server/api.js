'use server';

import { cache } from 'react';
import { getConfig } from '../config';

// –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –¥–ª—è API
const API_URL = getConfig('API_URL');
console.log('üìã API_URL:', API_URL);

/**
 * –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ–π—Å–∞ –ø–æ slug
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç React Cache –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */
import qs from 'qs';

export const getCaseBySlug = cache(async (slug) => {
  console.log('üìã –ó–∞–ø—Ä–æ—Å –∫–µ–π—Å–∞ –ø–æ slug:', slug);

  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º query —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º deep populate
    const query = qs.stringify({
      filters: {
        slug: { $eq: slug },
      },
      populate: {
        categories: true,
        blocks: {
          populate: '*',
        },
      },
    }, { encodeValuesOnly: true });

    const url = `${API_URL}/api/cases?${query}`;
    console.log('üìã URL –∑–∞–ø—Ä–æ—Å–∞ –∫ API:', url);

    const response = await fetch(
      url,
      {
        next: { revalidate: 3600 },
        headers: { 'Content-Type': 'application/json' },
      }
    );

    console.log('üìã –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API:', response.status, response.statusText);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ API:', response.status, errorText);
      throw new Error(`Failed to fetch case: ${response.statusText}`);
    }

    const data = await response.json();
    console.log('üìã –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(data, null, 2));

    if (!data.data || data.data.length === 0) {
      console.log('‚ùå –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API');
      return null;
    }

    return data.data[0] || null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–µ–π—Å–∞:', error);
    return null;
  }
});


/**
 * –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–µ–π—Å–æ–≤
 * –° –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
 */
export const getCases = cache(async ({ 
  limit = 100, 
  offset = 0, 
  excludeSlug = null,
  categoryId = null
}) => {
  console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∫–µ–π—Å–æ–≤:', { limit, offset, excludeSlug, categoryId });

  try {
    let filters = [];
    
    if (excludeSlug) {
      filters.push(`filters[slug][$ne]=${excludeSlug}`);
    }
    
    if (categoryId) {
      filters.push(`filters[categories][id][$eq]=${categoryId}`);
    }
    
    const populates = [
      'populate[categories]=true'
    ];
    
    const url = `${API_URL}/api/cases?${[
      `pagination[limit]=${limit}`,
      `pagination[start]=${offset}`,
      ...filters,
      ...populates,
      'sort[0]=createdAt:desc'
    ].join('&')}`;

    console.log('üìã URL –∑–∞–ø—Ä–æ—Å–∞ –∫–µ–π—Å–æ–≤:', url);
    
    const response = await fetch(url, { 
      next: { revalidate: 3600 },
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    console.log('üìã –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API:', response.status, response.statusText);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ API:', response.status, errorText);
      throw new Error(`Failed to fetch cases: ${response.statusText}`);
    }
    
    const data = await response.json();
    console.log('üìã –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(data, null, 2));
    
    return {
      cases: data.data || [],
      meta: data.meta || { pagination: { total: 0 } }
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–µ–π—Å–æ–≤:', error);
    return { cases: [], meta: { pagination: { total: 0 } } };
  }
});

/**
 * –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–µ–π—Å–æ–≤
 */
export const getCaseCategories = cache(async () => {
  console.log('üìã –ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π');

  try {
    const url = `${API_URL}/api/categories?${[
      'pagination[limit]=100',
      'sort[0]=text:asc'  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    ].join('&')}`;

    console.log('üìã URL –∑–∞–ø—Ä–æ—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', url);
    
    const response = await fetch(url, { 
      next: { revalidate: 86400 },
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    console.log('üìã –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API:', response.status, response.statusText);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ API:', response.status, errorText);
      throw new Error(`Failed to fetch categories: ${response.statusText}`);
    }
    
    const data = await response.json();
    console.log('üìã –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(data, null, 2));
    
    return data.data || [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    return [];
  }
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –∫–µ–π—Å–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–µ–π—Å–æ–≤)
 */
export const getCasesAndCategories = cache(async (options = {}) => {
  console.log('üìã –ó–∞–ø—Ä–æ—Å –∫–µ–π—Å–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', options);

  try {
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–µ–π—Å—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const [casesData, categoriesData] = await Promise.all([
      getCases(options),
      getCaseCategories()
    ]);
    
    console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞:', {
      casesCount: casesData.cases?.length || 0,
      categoriesCount: categoriesData?.length || 0
    });
    
    return {
      cases: casesData.cases || [],
      categories: categoriesData || []
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–µ–π—Å–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    return { 
      cases: [],
      categories: []
    };
  }
}); 